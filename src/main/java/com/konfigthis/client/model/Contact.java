/*
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.13.2
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Location;
import com.konfigthis.client.model.Organization;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Represents an individual and their details.
 */
@ApiModel(description = "Represents an individual and their details.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Contact {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_CONTACT_ID = "contactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private Long contactId;

  public static final String SERIALIZED_NAME_DISPLAY_ORDER = "displayOrder";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ORDER)
  private Long displayOrder;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_FULL_NAME_INVERTED = "fullNameInverted";
  @SerializedName(SERIALIZED_NAME_FULL_NAME_INVERTED)
  private String fullNameInverted;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Long locationId;

  public static final String SERIALIZED_NAME_MIDDLE_INITIAL = "middleInitial";
  @SerializedName(SERIALIZED_NAME_MIDDLE_INITIAL)
  private String middleInitial;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private Organization organization;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_PRIMARY_EMAIL = "primaryEmail";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EMAIL)
  private String primaryEmail;

  public static final String SERIALIZED_NAME_SECONDARY_EMAIL = "secondaryEmail";
  @SerializedName(SERIALIZED_NAME_SECONDARY_EMAIL)
  private String secondaryEmail;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix;

  public static final String SERIALIZED_NAME_WORK_PHONE_EXTENSION = "workPhoneExtension";
  @SerializedName(SERIALIZED_NAME_WORK_PHONE_EXTENSION)
  private String workPhoneExtension;

  public static final String SERIALIZED_NAME_WORK_PHONE = "workPhone";
  @SerializedName(SERIALIZED_NAME_WORK_PHONE)
  private String workPhone;

  public static final String SERIALIZED_NAME_RECEIVE_EMAIL = "receiveEmail";
  @SerializedName(SERIALIZED_NAME_RECEIVE_EMAIL)
  private Long receiveEmail;

  public static final String SERIALIZED_NAME_IS_PUBLIC_EMAIL = "isPublicEmail";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC_EMAIL)
  private Boolean isPublicEmail;

  public Contact() {
  }

  public Contact title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title for the contact
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title for the contact")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Contact contactId(Long contactId) {
    
    
    
    
    this.contactId = contactId;
    return this;
  }

   /**
   * Unique ID for this contact
   * @return contactId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for this contact")

  public Long getContactId() {
    return contactId;
  }


  public void setContactId(Long contactId) {
    
    
    
    this.contactId = contactId;
  }


  public Contact displayOrder(Long displayOrder) {
    
    
    
    
    this.displayOrder = displayOrder;
    return this;
  }

   /**
   * Display order
   * @return displayOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Display order")

  public Long getDisplayOrder() {
    return displayOrder;
  }


  public void setDisplayOrder(Long displayOrder) {
    
    
    
    this.displayOrder = displayOrder;
  }


  public Contact fax(String fax) {
    
    
    
    
    this.fax = fax;
    return this;
  }

   /**
   * Fax number for the contact
   * @return fax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fax number for the contact")

  public String getFax() {
    return fax;
  }


  public void setFax(String fax) {
    
    
    
    this.fax = fax;
  }


  public Contact firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name for the contact
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "First name for the contact")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public Contact lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name for the contact
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last name for the contact")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public Contact fullName(String fullName) {
    
    
    
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Full name for the contact, first middle initial last
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Full name for the contact, first middle initial last")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    
    
    
    this.fullName = fullName;
  }


  public Contact fullNameInverted(String fullNameInverted) {
    
    
    
    
    this.fullNameInverted = fullNameInverted;
    return this;
  }

   /**
   * Full name for the contact but inverted, last first middle initial
   * @return fullNameInverted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Full name for the contact but inverted, last first middle initial")

  public String getFullNameInverted() {
    return fullNameInverted;
  }


  public void setFullNameInverted(String fullNameInverted) {
    
    
    
    this.fullNameInverted = fullNameInverted;
  }


  public Contact location(Location location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Location getLocation() {
    return location;
  }


  public void setLocation(Location location) {
    
    
    
    this.location = location;
  }


  public Contact locationId(Long locationId) {
    
    
    
    
    this.locationId = locationId;
    return this;
  }

   /**
   * Unique ID representing the contacts location
   * @return locationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID representing the contacts location")

  public Long getLocationId() {
    return locationId;
  }


  public void setLocationId(Long locationId) {
    
    
    
    this.locationId = locationId;
  }


  public Contact middleInitial(String middleInitial) {
    
    
    
    
    this.middleInitial = middleInitial;
    return this;
  }

   /**
   * Middle initial for the contact
   * @return middleInitial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Middle initial for the contact")

  public String getMiddleInitial() {
    return middleInitial;
  }


  public void setMiddleInitial(String middleInitial) {
    
    
    
    this.middleInitial = middleInitial;
  }


  public Contact organization(Organization organization) {
    
    
    
    
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Organization getOrganization() {
    return organization;
  }


  public void setOrganization(Organization organization) {
    
    
    
    this.organization = organization;
  }


  public Contact prefix(String prefix) {
    
    
    
    
    this.prefix = prefix;
    return this;
  }

   /**
   * Prefix for the contact
   * @return prefix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Prefix for the contact")

  public String getPrefix() {
    return prefix;
  }


  public void setPrefix(String prefix) {
    
    
    
    this.prefix = prefix;
  }


  public Contact primaryEmail(String primaryEmail) {
    
    
    
    
    this.primaryEmail = primaryEmail;
    return this;
  }

   /**
   * Primary email for the contact
   * @return primaryEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Primary email for the contact")

  public String getPrimaryEmail() {
    return primaryEmail;
  }


  public void setPrimaryEmail(String primaryEmail) {
    
    
    
    this.primaryEmail = primaryEmail;
  }


  public Contact secondaryEmail(String secondaryEmail) {
    
    
    
    
    this.secondaryEmail = secondaryEmail;
    return this;
  }

   /**
   * Secondary email for the contact
   * @return secondaryEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Secondary email for the contact")

  public String getSecondaryEmail() {
    return secondaryEmail;
  }


  public void setSecondaryEmail(String secondaryEmail) {
    
    
    
    this.secondaryEmail = secondaryEmail;
  }


  public Contact suffix(String suffix) {
    
    
    
    
    this.suffix = suffix;
    return this;
  }

   /**
   * Suffix for the contact
   * @return suffix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Suffix for the contact")

  public String getSuffix() {
    return suffix;
  }


  public void setSuffix(String suffix) {
    
    
    
    this.suffix = suffix;
  }


  public Contact workPhoneExtension(String workPhoneExtension) {
    
    
    
    
    this.workPhoneExtension = workPhoneExtension;
    return this;
  }

   /**
   * Extension for contacts work phone number
   * @return workPhoneExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extension for contacts work phone number")

  public String getWorkPhoneExtension() {
    return workPhoneExtension;
  }


  public void setWorkPhoneExtension(String workPhoneExtension) {
    
    
    
    this.workPhoneExtension = workPhoneExtension;
  }


  public Contact workPhone(String workPhone) {
    
    
    
    
    this.workPhone = workPhone;
    return this;
  }

   /**
   * Phone number for the contact
   * @return workPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Phone number for the contact")

  public String getWorkPhone() {
    return workPhone;
  }


  public void setWorkPhone(String workPhone) {
    
    
    
    this.workPhone = workPhone;
  }


  public Contact receiveEmail(Long receiveEmail) {
    
    
    
    
    this.receiveEmail = receiveEmail;
    return this;
  }

   /**
   * 1 if the contact is signed up to receive TechPort emails
   * @return receiveEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "1 if the contact is signed up to receive TechPort emails")

  public Long getReceiveEmail() {
    return receiveEmail;
  }


  public void setReceiveEmail(Long receiveEmail) {
    
    
    
    this.receiveEmail = receiveEmail;
  }


  public Contact isPublicEmail(Boolean isPublicEmail) {
    
    
    
    
    this.isPublicEmail = isPublicEmail;
    return this;
  }

   /**
   * True if the contacts email is available to be shown to the public
   * @return isPublicEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the contacts email is available to be shown to the public")

  public Boolean getIsPublicEmail() {
    return isPublicEmail;
  }


  public void setIsPublicEmail(Boolean isPublicEmail) {
    
    
    
    this.isPublicEmail = isPublicEmail;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Contact instance itself
   */
  public Contact putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Contact contact = (Contact) o;
    return Objects.equals(this.title, contact.title) &&
        Objects.equals(this.contactId, contact.contactId) &&
        Objects.equals(this.displayOrder, contact.displayOrder) &&
        Objects.equals(this.fax, contact.fax) &&
        Objects.equals(this.firstName, contact.firstName) &&
        Objects.equals(this.lastName, contact.lastName) &&
        Objects.equals(this.fullName, contact.fullName) &&
        Objects.equals(this.fullNameInverted, contact.fullNameInverted) &&
        Objects.equals(this.location, contact.location) &&
        Objects.equals(this.locationId, contact.locationId) &&
        Objects.equals(this.middleInitial, contact.middleInitial) &&
        Objects.equals(this.organization, contact.organization) &&
        Objects.equals(this.prefix, contact.prefix) &&
        Objects.equals(this.primaryEmail, contact.primaryEmail) &&
        Objects.equals(this.secondaryEmail, contact.secondaryEmail) &&
        Objects.equals(this.suffix, contact.suffix) &&
        Objects.equals(this.workPhoneExtension, contact.workPhoneExtension) &&
        Objects.equals(this.workPhone, contact.workPhone) &&
        Objects.equals(this.receiveEmail, contact.receiveEmail) &&
        Objects.equals(this.isPublicEmail, contact.isPublicEmail)&&
        Objects.equals(this.additionalProperties, contact.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, contactId, displayOrder, fax, firstName, lastName, fullName, fullNameInverted, location, locationId, middleInitial, organization, prefix, primaryEmail, secondaryEmail, suffix, workPhoneExtension, workPhone, receiveEmail, isPublicEmail, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Contact {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    displayOrder: ").append(toIndentedString(displayOrder)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    fullNameInverted: ").append(toIndentedString(fullNameInverted)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    middleInitial: ").append(toIndentedString(middleInitial)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    primaryEmail: ").append(toIndentedString(primaryEmail)).append("\n");
    sb.append("    secondaryEmail: ").append(toIndentedString(secondaryEmail)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    workPhoneExtension: ").append(toIndentedString(workPhoneExtension)).append("\n");
    sb.append("    workPhone: ").append(toIndentedString(workPhone)).append("\n");
    sb.append("    receiveEmail: ").append(toIndentedString(receiveEmail)).append("\n");
    sb.append("    isPublicEmail: ").append(toIndentedString(isPublicEmail)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("contactId");
    openapiFields.add("displayOrder");
    openapiFields.add("fax");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("fullName");
    openapiFields.add("fullNameInverted");
    openapiFields.add("location");
    openapiFields.add("locationId");
    openapiFields.add("middleInitial");
    openapiFields.add("organization");
    openapiFields.add("prefix");
    openapiFields.add("primaryEmail");
    openapiFields.add("secondaryEmail");
    openapiFields.add("suffix");
    openapiFields.add("workPhoneExtension");
    openapiFields.add("workPhone");
    openapiFields.add("receiveEmail");
    openapiFields.add("isPublicEmail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Contact
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Contact.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Contact is not found in the empty JSON string", Contact.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("fullNameInverted") != null && !jsonObj.get("fullNameInverted").isJsonNull()) && !jsonObj.get("fullNameInverted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullNameInverted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullNameInverted").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
      if ((jsonObj.get("middleInitial") != null && !jsonObj.get("middleInitial").isJsonNull()) && !jsonObj.get("middleInitial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleInitial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleInitial").toString()));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        Organization.validateJsonObject(jsonObj.getAsJsonObject("organization"));
      }
      if ((jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) && !jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      if ((jsonObj.get("primaryEmail") != null && !jsonObj.get("primaryEmail").isJsonNull()) && !jsonObj.get("primaryEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryEmail").toString()));
      }
      if ((jsonObj.get("secondaryEmail") != null && !jsonObj.get("secondaryEmail").isJsonNull()) && !jsonObj.get("secondaryEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryEmail").toString()));
      }
      if ((jsonObj.get("suffix") != null && !jsonObj.get("suffix").isJsonNull()) && !jsonObj.get("suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suffix").toString()));
      }
      if ((jsonObj.get("workPhoneExtension") != null && !jsonObj.get("workPhoneExtension").isJsonNull()) && !jsonObj.get("workPhoneExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workPhoneExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workPhoneExtension").toString()));
      }
      if ((jsonObj.get("workPhone") != null && !jsonObj.get("workPhone").isJsonNull()) && !jsonObj.get("workPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workPhone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Contact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Contact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Contact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Contact.class));

       return (TypeAdapter<T>) new TypeAdapter<Contact>() {
           @Override
           public void write(JsonWriter out, Contact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Contact read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Contact instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Contact given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Contact
  * @throws IOException if the JSON string is invalid with respect to Contact
  */
  public static Contact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Contact.class);
  }

 /**
  * Convert an instance of Contact to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

