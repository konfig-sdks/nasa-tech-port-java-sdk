/*
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.13.2
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LkuCode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Represents a physical location.
 */
@ApiModel(description = "Represents a physical location.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Location {
  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Long locationId;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "addressLine1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "addressLine2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "locationType";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  private LkuCode locationType;

  public static final String SERIALIZED_NAME_LOCATION_TYPE_ID = "locationTypeId";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE_ID)
  private Long locationTypeId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATE_TERRITORY_NAME = "stateTerritoryName";
  @SerializedName(SERIALIZED_NAME_STATE_TERRITORY_NAME)
  private String stateTerritoryName;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_ZIP2 = "zip2";
  @SerializedName(SERIALIZED_NAME_ZIP2)
  private String zip2;

  public static final String SERIALIZED_NAME_NA_LOCATION = "NALocation";
  @SerializedName(SERIALIZED_NAME_NA_LOCATION)
  private String naLocation;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private LkuCode country;

  public static final String SERIALIZED_NAME_COUNTRY_ID = "countryId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ID)
  private Long countryId;

  public static final String SERIALIZED_NAME_SHORT_LOCATION_STRING = "shortLocationString";
  @SerializedName(SERIALIZED_NAME_SHORT_LOCATION_STRING)
  private String shortLocationString;

  public Location() {
  }

  public Location locationId(Long locationId) {
    
    
    
    
    this.locationId = locationId;
    return this;
  }

   /**
   * Unique ID for this location
   * @return locationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for this location")

  public Long getLocationId() {
    return locationId;
  }


  public void setLocationId(Long locationId) {
    
    
    
    this.locationId = locationId;
  }


  public Location addressLine1(String addressLine1) {
    
    
    
    
    this.addressLine1 = addressLine1;
    return this;
  }

   /**
   * First line of address for location
   * @return addressLine1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "First line of address for location")

  public String getAddressLine1() {
    return addressLine1;
  }


  public void setAddressLine1(String addressLine1) {
    
    
    
    this.addressLine1 = addressLine1;
  }


  public Location addressLine2(String addressLine2) {
    
    
    
    
    this.addressLine2 = addressLine2;
    return this;
  }

   /**
   * Second line of address for location
   * @return addressLine2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Second line of address for location")

  public String getAddressLine2() {
    return addressLine2;
  }


  public void setAddressLine2(String addressLine2) {
    
    
    
    this.addressLine2 = addressLine2;
  }


  public Location city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * City for location
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City for location")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public Location locationType(LkuCode locationType) {
    
    
    
    
    this.locationType = locationType;
    return this;
  }

   /**
   * Get locationType
   * @return locationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LkuCode getLocationType() {
    return locationType;
  }


  public void setLocationType(LkuCode locationType) {
    
    
    
    this.locationType = locationType;
  }


  public Location locationTypeId(Long locationTypeId) {
    
    
    
    
    this.locationTypeId = locationTypeId;
    return this;
  }

   /**
   * Unique ID for the lookup code representing the location type
   * @return locationTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for the lookup code representing the location type")

  public Long getLocationTypeId() {
    return locationTypeId;
  }


  public void setLocationTypeId(Long locationTypeId) {
    
    
    
    this.locationTypeId = locationTypeId;
  }


  public Location state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * State for location
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State for location")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public Location stateTerritoryName(String stateTerritoryName) {
    
    
    
    
    this.stateTerritoryName = stateTerritoryName;
    return this;
  }

   /**
   * State Territory name for location
   * @return stateTerritoryName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State Territory name for location")

  public String getStateTerritoryName() {
    return stateTerritoryName;
  }


  public void setStateTerritoryName(String stateTerritoryName) {
    
    
    
    this.stateTerritoryName = stateTerritoryName;
  }


  public Location zip(String zip) {
    
    
    
    
    this.zip = zip;
    return this;
  }

   /**
   * ZIP code for location
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ZIP code for location")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    
    this.zip = zip;
  }


  public Location zip2(String zip2) {
    
    
    
    
    this.zip2 = zip2;
    return this;
  }

   /**
   * Secondary ZIP code for location
   * @return zip2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Secondary ZIP code for location")

  public String getZip2() {
    return zip2;
  }


  public void setZip2(String zip2) {
    
    
    
    this.zip2 = zip2;
  }


  public Location naLocation(String naLocation) {
    
    
    
    
    this.naLocation = naLocation;
    return this;
  }

   /**
   * True if this location is located in North America
   * @return naLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this location is located in North America")

  public String getNaLocation() {
    return naLocation;
  }


  public void setNaLocation(String naLocation) {
    
    
    
    this.naLocation = naLocation;
  }


  public Location country(LkuCode country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LkuCode getCountry() {
    return country;
  }


  public void setCountry(LkuCode country) {
    
    
    
    this.country = country;
  }


  public Location countryId(Long countryId) {
    
    
    
    
    this.countryId = countryId;
    return this;
  }

   /**
   * Unique ID for the lookup code representing the location country
   * @return countryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for the lookup code representing the location country")

  public Long getCountryId() {
    return countryId;
  }


  public void setCountryId(Long countryId) {
    
    
    
    this.countryId = countryId;
  }


  public Location shortLocationString(String shortLocationString) {
    
    
    
    
    this.shortLocationString = shortLocationString;
    return this;
  }

   /**
   * A string representing the full location
   * @return shortLocationString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A string representing the full location")

  public String getShortLocationString() {
    return shortLocationString;
  }


  public void setShortLocationString(String shortLocationString) {
    
    
    
    this.shortLocationString = shortLocationString;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Location instance itself
   */
  public Location putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return Objects.equals(this.locationId, location.locationId) &&
        Objects.equals(this.addressLine1, location.addressLine1) &&
        Objects.equals(this.addressLine2, location.addressLine2) &&
        Objects.equals(this.city, location.city) &&
        Objects.equals(this.locationType, location.locationType) &&
        Objects.equals(this.locationTypeId, location.locationTypeId) &&
        Objects.equals(this.state, location.state) &&
        Objects.equals(this.stateTerritoryName, location.stateTerritoryName) &&
        Objects.equals(this.zip, location.zip) &&
        Objects.equals(this.zip2, location.zip2) &&
        Objects.equals(this.naLocation, location.naLocation) &&
        Objects.equals(this.country, location.country) &&
        Objects.equals(this.countryId, location.countryId) &&
        Objects.equals(this.shortLocationString, location.shortLocationString)&&
        Objects.equals(this.additionalProperties, location.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationId, addressLine1, addressLine2, city, locationType, locationTypeId, state, stateTerritoryName, zip, zip2, naLocation, country, countryId, shortLocationString, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location {\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    locationTypeId: ").append(toIndentedString(locationTypeId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateTerritoryName: ").append(toIndentedString(stateTerritoryName)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    zip2: ").append(toIndentedString(zip2)).append("\n");
    sb.append("    naLocation: ").append(toIndentedString(naLocation)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryId: ").append(toIndentedString(countryId)).append("\n");
    sb.append("    shortLocationString: ").append(toIndentedString(shortLocationString)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locationId");
    openapiFields.add("addressLine1");
    openapiFields.add("addressLine2");
    openapiFields.add("city");
    openapiFields.add("locationType");
    openapiFields.add("locationTypeId");
    openapiFields.add("state");
    openapiFields.add("stateTerritoryName");
    openapiFields.add("zip");
    openapiFields.add("zip2");
    openapiFields.add("NALocation");
    openapiFields.add("country");
    openapiFields.add("countryId");
    openapiFields.add("shortLocationString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Location
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Location.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Location is not found in the empty JSON string", Location.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("addressLine1") != null && !jsonObj.get("addressLine1").isJsonNull()) && !jsonObj.get("addressLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine1").toString()));
      }
      if ((jsonObj.get("addressLine2") != null && !jsonObj.get("addressLine2").isJsonNull()) && !jsonObj.get("addressLine2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine2").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      // validate the optional field `locationType`
      if (jsonObj.get("locationType") != null && !jsonObj.get("locationType").isJsonNull()) {
        LkuCode.validateJsonObject(jsonObj.getAsJsonObject("locationType"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("stateTerritoryName") != null && !jsonObj.get("stateTerritoryName").isJsonNull()) && !jsonObj.get("stateTerritoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateTerritoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateTerritoryName").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if ((jsonObj.get("zip2") != null && !jsonObj.get("zip2").isJsonNull()) && !jsonObj.get("zip2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip2").toString()));
      }
      if ((jsonObj.get("NALocation") != null && !jsonObj.get("NALocation").isJsonNull()) && !jsonObj.get("NALocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NALocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NALocation").toString()));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        LkuCode.validateJsonObject(jsonObj.getAsJsonObject("country"));
      }
      if ((jsonObj.get("shortLocationString") != null && !jsonObj.get("shortLocationString").isJsonNull()) && !jsonObj.get("shortLocationString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortLocationString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortLocationString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Location.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Location' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Location> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Location.class));

       return (TypeAdapter<T>) new TypeAdapter<Location>() {
           @Override
           public void write(JsonWriter out, Location value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Location read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Location instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Location given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Location
  * @throws IOException if the JSON string is invalid with respect to Location
  */
  public static Location fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Location.class);
  }

 /**
  * Convert an instance of Location to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

