/*
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.13.2
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.LibraryItem;
import com.konfigthis.client.model.LkuCode;
import com.konfigthis.client.model.Location;
import com.konfigthis.client.model.Organization;
import com.konfigthis.client.model.Program;
import com.konfigthis.client.model.TaxonomyNode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Top-level TechPort object representing a NASA technology project and its associated data.
 */
@ApiModel(description = "Top-level TechPort object representing a NASA technology project and its associated data.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Project {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Long projectId;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private LocalDate lastUpdated;

  public static final String SERIALIZED_NAME_ACRONYM = "acronym";
  @SerializedName(SERIALIZED_NAME_ACRONYM)
  private String acronym;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "statusDescription";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_BENEFITS = "benefits";
  @SerializedName(SERIALIZED_NAME_BENEFITS)
  private String benefits;

  public static final String SERIALIZED_NAME_START_DATE_STRING = "startDateString";
  @SerializedName(SERIALIZED_NAME_START_DATE_STRING)
  private String startDateString;

  public static final String SERIALIZED_NAME_END_DATE_STRING = "endDateString";
  @SerializedName(SERIALIZED_NAME_END_DATE_STRING)
  private String endDateString;

  public static final String SERIALIZED_NAME_START_TRL = "startTrl";
  @SerializedName(SERIALIZED_NAME_START_TRL)
  private Long startTrl;

  public static final String SERIALIZED_NAME_CURRENT_TRL = "currentTrl";
  @SerializedName(SERIALIZED_NAME_CURRENT_TRL)
  private Long currentTrl;

  public static final String SERIALIZED_NAME_END_TRL = "endTrl";
  @SerializedName(SERIALIZED_NAME_END_TRL)
  private Long endTrl;

  public static final String SERIALIZED_NAME_PRIMARY_TAXONOMY_NODES = "primaryTaxonomyNodes";
  @SerializedName(SERIALIZED_NAME_PRIMARY_TAXONOMY_NODES)
  private List<TaxonomyNode> primaryTaxonomyNodes = null;

  public static final String SERIALIZED_NAME_ADDITIONAL_TAXONOMY_NODES = "additionalTaxonomyNodes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_TAXONOMY_NODES)
  private List<TaxonomyNode> additionalTaxonomyNodes = null;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<LkuCode> destinations = null;

  public static final String SERIALIZED_NAME_PROGRAM = "program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private Program program;

  public static final String SERIALIZED_NAME_RESPONSIBLE_MD = "responsibleMd";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_MD)
  private Program responsibleMd;

  public static final String SERIALIZED_NAME_LEAD_ORGANIZATION = "leadOrganization";
  @SerializedName(SERIALIZED_NAME_LEAD_ORGANIZATION)
  private Organization leadOrganization;

  public static final String SERIALIZED_NAME_SUPPORTING_ORGANIZATIONS = "supportingOrganizations";
  @SerializedName(SERIALIZED_NAME_SUPPORTING_ORGANIZATIONS)
  private List<Organization> supportingOrganizations = null;

  public static final String SERIALIZED_NAME_CO_FUNDING_PARTNERS = "coFundingPartners";
  @SerializedName(SERIALIZED_NAME_CO_FUNDING_PARTNERS)
  private List<Organization> coFundingPartners = null;

  public static final String SERIALIZED_NAME_STATES_WITH_WORK = "statesWithWork";
  @SerializedName(SERIALIZED_NAME_STATES_WITH_WORK)
  private List<Location> statesWithWork = null;

  public static final String SERIALIZED_NAME_PROGRAM_DIRECTORS = "programDirectors";
  @SerializedName(SERIALIZED_NAME_PROGRAM_DIRECTORS)
  private List<Contact> programDirectors = null;

  public static final String SERIALIZED_NAME_PROGRAM_MANAGERS = "programManagers";
  @SerializedName(SERIALIZED_NAME_PROGRAM_MANAGERS)
  private List<Contact> programManagers = null;

  public static final String SERIALIZED_NAME_PROJECT_MANAGERS = "projectManagers";
  @SerializedName(SERIALIZED_NAME_PROJECT_MANAGERS)
  private List<Contact> projectManagers = null;

  public static final String SERIALIZED_NAME_PRINCIPAL_INVESTIGATORS = "principalInvestigators";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_INVESTIGATORS)
  private List<Contact> principalInvestigators = null;

  public static final String SERIALIZED_NAME_CO_INVESTIGATORS = "coInvestigators";
  @SerializedName(SERIALIZED_NAME_CO_INVESTIGATORS)
  private List<Contact> coInvestigators = null;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_LIBRARY_ITEMS = "libraryItems";
  @SerializedName(SERIALIZED_NAME_LIBRARY_ITEMS)
  private List<LibraryItem> libraryItems = null;

  public static final String SERIALIZED_NAME_STI_DAAS = "stiDaas";
  @SerializedName(SERIALIZED_NAME_STI_DAAS)
  private List<LibraryItem> stiDaas = null;

  public static final String SERIALIZED_NAME_CLOSEOUT_SUMMARY = "closeoutSummary";
  @SerializedName(SERIALIZED_NAME_CLOSEOUT_SUMMARY)
  private String closeoutSummary;

  public static final String SERIALIZED_NAME_CLOSEOUT_DOCUMENTS = "closeoutDocuments";
  @SerializedName(SERIALIZED_NAME_CLOSEOUT_DOCUMENTS)
  private List<LibraryItem> closeoutDocuments = null;

  public static final String SERIALIZED_NAME_PRIMARY_IMAGE = "primaryImage";
  @SerializedName(SERIALIZED_NAME_PRIMARY_IMAGE)
  private LibraryItem primaryImage;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "viewCount";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private Long viewCount;

  public Project() {
  }

  public Project title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title of the project.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title of the project.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Project description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A detailed description of the project.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A detailed description of the project.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Project projectId(Long projectId) {
    
    
    
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Unique identifier for the project.
   * @return projectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the project.")

  public Long getProjectId() {
    return projectId;
  }


  public void setProjectId(Long projectId) {
    
    
    
    this.projectId = projectId;
  }


  public Project lastUpdated(LocalDate lastUpdated) {
    
    
    
    
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * ISO 8601 full-date in the format YYYY-MM-DD describing the last time this project was updated.
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO 8601 full-date in the format YYYY-MM-DD describing the last time this project was updated.")

  public LocalDate getLastUpdated() {
    return lastUpdated;
  }


  public void setLastUpdated(LocalDate lastUpdated) {
    
    
    
    this.lastUpdated = lastUpdated;
  }


  public Project acronym(String acronym) {
    
    
    
    
    this.acronym = acronym;
    return this;
  }

   /**
   * Abbreviated name of the project.
   * @return acronym
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Abbreviated name of the project.")

  public String getAcronym() {
    return acronym;
  }


  public void setAcronym(String acronym) {
    
    
    
    this.acronym = acronym;
  }


  public Project statusDescription(String statusDescription) {
    
    
    
    
    this.statusDescription = statusDescription;
    return this;
  }

   /**
   * Indicates whether the project is currently active, completed, or canceled.
   * @return statusDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the project is currently active, completed, or canceled.")

  public String getStatusDescription() {
    return statusDescription;
  }


  public void setStatusDescription(String statusDescription) {
    
    
    
    this.statusDescription = statusDescription;
  }


  public Project benefits(String benefits) {
    
    
    
    
    this.benefits = benefits;
    return this;
  }

   /**
   * Describes the benefits offered to NASA funded and planned missions, unfunded or planned missions, commercial space industry, and to the nation.
   * @return benefits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Describes the benefits offered to NASA funded and planned missions, unfunded or planned missions, commercial space industry, and to the nation.")

  public String getBenefits() {
    return benefits;
  }


  public void setBenefits(String benefits) {
    
    
    
    this.benefits = benefits;
  }


  public Project startDateString(String startDateString) {
    
    
    
    
    this.startDateString = startDateString;
    return this;
  }

   /**
   * The month and year the project was authorized to proceed.
   * @return startDateString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The month and year the project was authorized to proceed.")

  public String getStartDateString() {
    return startDateString;
  }


  public void setStartDateString(String startDateString) {
    
    
    
    this.startDateString = startDateString;
  }


  public Project endDateString(String endDateString) {
    
    
    
    
    this.endDateString = endDateString;
    return this;
  }

   /**
   * The month and year the project is expected to complete its work.
   * @return endDateString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The month and year the project is expected to complete its work.")

  public String getEndDateString() {
    return endDateString;
  }


  public void setEndDateString(String endDateString) {
    
    
    
    this.endDateString = endDateString;
  }


  public Project startTrl(Long startTrl) {
    
    
    
    
    this.startTrl = startTrl;
    return this;
  }

   /**
   * The technology maturity (technology readiness level) of the project at its beginning.
   * @return startTrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The technology maturity (technology readiness level) of the project at its beginning.")

  public Long getStartTrl() {
    return startTrl;
  }


  public void setStartTrl(Long startTrl) {
    
    
    
    this.startTrl = startTrl;
  }


  public Project currentTrl(Long currentTrl) {
    
    
    
    
    this.currentTrl = currentTrl;
    return this;
  }

   /**
   * The current technology maturity (technology readiness level) of the project.
   * @return currentTrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current technology maturity (technology readiness level) of the project.")

  public Long getCurrentTrl() {
    return currentTrl;
  }


  public void setCurrentTrl(Long currentTrl) {
    
    
    
    this.currentTrl = currentTrl;
  }


  public Project endTrl(Long endTrl) {
    
    
    
    
    this.endTrl = endTrl;
    return this;
  }

   /**
   * The estimated technology maturity (technology readiness level) of the project at its end.
   * @return endTrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The estimated technology maturity (technology readiness level) of the project at its end.")

  public Long getEndTrl() {
    return endTrl;
  }


  public void setEndTrl(Long endTrl) {
    
    
    
    this.endTrl = endTrl;
  }


  public Project primaryTaxonomyNodes(List<TaxonomyNode> primaryTaxonomyNodes) {
    
    
    
    
    this.primaryTaxonomyNodes = primaryTaxonomyNodes;
    return this;
  }

  public Project addPrimaryTaxonomyNodesItem(TaxonomyNode primaryTaxonomyNodesItem) {
    if (this.primaryTaxonomyNodes == null) {
      this.primaryTaxonomyNodes = new ArrayList<>();
    }
    this.primaryTaxonomyNodes.add(primaryTaxonomyNodesItem);
    return this;
  }

   /**
   * List of primary taxonomy nodes (from the NASA Technology Roadmap) associated with the project.
   * @return primaryTaxonomyNodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of primary taxonomy nodes (from the NASA Technology Roadmap) associated with the project.")

  public List<TaxonomyNode> getPrimaryTaxonomyNodes() {
    return primaryTaxonomyNodes;
  }


  public void setPrimaryTaxonomyNodes(List<TaxonomyNode> primaryTaxonomyNodes) {
    
    
    
    this.primaryTaxonomyNodes = primaryTaxonomyNodes;
  }


  public Project additionalTaxonomyNodes(List<TaxonomyNode> additionalTaxonomyNodes) {
    
    
    
    
    this.additionalTaxonomyNodes = additionalTaxonomyNodes;
    return this;
  }

  public Project addAdditionalTaxonomyNodesItem(TaxonomyNode additionalTaxonomyNodesItem) {
    if (this.additionalTaxonomyNodes == null) {
      this.additionalTaxonomyNodes = new ArrayList<>();
    }
    this.additionalTaxonomyNodes.add(additionalTaxonomyNodesItem);
    return this;
  }

   /**
   * List of additional and cross-cutting taxonomy nodes associated with the project.
   * @return additionalTaxonomyNodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of additional and cross-cutting taxonomy nodes associated with the project.")

  public List<TaxonomyNode> getAdditionalTaxonomyNodes() {
    return additionalTaxonomyNodes;
  }


  public void setAdditionalTaxonomyNodes(List<TaxonomyNode> additionalTaxonomyNodes) {
    
    
    
    this.additionalTaxonomyNodes = additionalTaxonomyNodes;
  }


  public Project destinations(List<LkuCode> destinations) {
    
    
    
    
    this.destinations = destinations;
    return this;
  }

  public Project addDestinationsItem(LkuCode destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

   /**
   * List of the NASA destinations the technology on this project helps achieve.
   * @return destinations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of the NASA destinations the technology on this project helps achieve.")

  public List<LkuCode> getDestinations() {
    return destinations;
  }


  public void setDestinations(List<LkuCode> destinations) {
    
    
    
    this.destinations = destinations;
  }


  public Project program(Program program) {
    
    
    
    
    this.program = program;
    return this;
  }

   /**
   * Get program
   * @return program
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Program getProgram() {
    return program;
  }


  public void setProgram(Program program) {
    
    
    
    this.program = program;
  }


  public Project responsibleMd(Program responsibleMd) {
    
    
    
    
    this.responsibleMd = responsibleMd;
    return this;
  }

   /**
   * Get responsibleMd
   * @return responsibleMd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Program getResponsibleMd() {
    return responsibleMd;
  }


  public void setResponsibleMd(Program responsibleMd) {
    
    
    
    this.responsibleMd = responsibleMd;
  }


  public Project leadOrganization(Organization leadOrganization) {
    
    
    
    
    this.leadOrganization = leadOrganization;
    return this;
  }

   /**
   * Get leadOrganization
   * @return leadOrganization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Organization getLeadOrganization() {
    return leadOrganization;
  }


  public void setLeadOrganization(Organization leadOrganization) {
    
    
    
    this.leadOrganization = leadOrganization;
  }


  public Project supportingOrganizations(List<Organization> supportingOrganizations) {
    
    
    
    
    this.supportingOrganizations = supportingOrganizations;
    return this;
  }

  public Project addSupportingOrganizationsItem(Organization supportingOrganizationsItem) {
    if (this.supportingOrganizations == null) {
      this.supportingOrganizations = new ArrayList<>();
    }
    this.supportingOrganizations.add(supportingOrganizationsItem);
    return this;
  }

   /**
   * The supporting organizations for this project that are conducting work on the project.
   * @return supportingOrganizations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The supporting organizations for this project that are conducting work on the project.")

  public List<Organization> getSupportingOrganizations() {
    return supportingOrganizations;
  }


  public void setSupportingOrganizations(List<Organization> supportingOrganizations) {
    
    
    
    this.supportingOrganizations = supportingOrganizations;
  }


  public Project coFundingPartners(List<Organization> coFundingPartners) {
    
    
    
    
    this.coFundingPartners = coFundingPartners;
    return this;
  }

  public Project addCoFundingPartnersItem(Organization coFundingPartnersItem) {
    if (this.coFundingPartners == null) {
      this.coFundingPartners = new ArrayList<>();
    }
    this.coFundingPartners.add(coFundingPartnersItem);
    return this;
  }

   /**
   * Other government agencies, NASA Mission Directoratres, universities, or commercial entities performing contributing resources to this project.
   * @return coFundingPartners
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Other government agencies, NASA Mission Directoratres, universities, or commercial entities performing contributing resources to this project.")

  public List<Organization> getCoFundingPartners() {
    return coFundingPartners;
  }


  public void setCoFundingPartners(List<Organization> coFundingPartners) {
    
    
    
    this.coFundingPartners = coFundingPartners;
  }


  public Project statesWithWork(List<Location> statesWithWork) {
    
    
    
    
    this.statesWithWork = statesWithWork;
    return this;
  }

  public Project addStatesWithWorkItem(Location statesWithWorkItem) {
    if (this.statesWithWork == null) {
      this.statesWithWork = new ArrayList<>();
    }
    this.statesWithWork.add(statesWithWorkItem);
    return this;
  }

   /**
   * States and territories with people performing work on this project.
   * @return statesWithWork
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "States and territories with people performing work on this project.")

  public List<Location> getStatesWithWork() {
    return statesWithWork;
  }


  public void setStatesWithWork(List<Location> statesWithWork) {
    
    
    
    this.statesWithWork = statesWithWork;
  }


  public Project programDirectors(List<Contact> programDirectors) {
    
    
    
    
    this.programDirectors = programDirectors;
    return this;
  }

  public Project addProgramDirectorsItem(Contact programDirectorsItem) {
    if (this.programDirectors == null) {
      this.programDirectors = new ArrayList<>();
    }
    this.programDirectors.add(programDirectorsItem);
    return this;
  }

   /**
   * Names of the Program Directors responsible for the management of this project.
   * @return programDirectors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Names of the Program Directors responsible for the management of this project.")

  public List<Contact> getProgramDirectors() {
    return programDirectors;
  }


  public void setProgramDirectors(List<Contact> programDirectors) {
    
    
    
    this.programDirectors = programDirectors;
  }


  public Project programManagers(List<Contact> programManagers) {
    
    
    
    
    this.programManagers = programManagers;
    return this;
  }

  public Project addProgramManagersItem(Contact programManagersItem) {
    if (this.programManagers == null) {
      this.programManagers = new ArrayList<>();
    }
    this.programManagers.add(programManagersItem);
    return this;
  }

   /**
   * Names of the Program Managers responsible for the management of this project.
   * @return programManagers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Names of the Program Managers responsible for the management of this project.")

  public List<Contact> getProgramManagers() {
    return programManagers;
  }


  public void setProgramManagers(List<Contact> programManagers) {
    
    
    
    this.programManagers = programManagers;
  }


  public Project projectManagers(List<Contact> projectManagers) {
    
    
    
    
    this.projectManagers = projectManagers;
    return this;
  }

  public Project addProjectManagersItem(Contact projectManagersItem) {
    if (this.projectManagers == null) {
      this.projectManagers = new ArrayList<>();
    }
    this.projectManagers.add(projectManagersItem);
    return this;
  }

   /**
   * Names of the Project Managers responsible for the management of this project.
   * @return projectManagers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Names of the Project Managers responsible for the management of this project.")

  public List<Contact> getProjectManagers() {
    return projectManagers;
  }


  public void setProjectManagers(List<Contact> projectManagers) {
    
    
    
    this.projectManagers = projectManagers;
  }


  public Project principalInvestigators(List<Contact> principalInvestigators) {
    
    
    
    
    this.principalInvestigators = principalInvestigators;
    return this;
  }

  public Project addPrincipalInvestigatorsItem(Contact principalInvestigatorsItem) {
    if (this.principalInvestigators == null) {
      this.principalInvestigators = new ArrayList<>();
    }
    this.principalInvestigators.add(principalInvestigatorsItem);
    return this;
  }

   /**
   * Names of the Principal Investigators who are the lead scientists or engineers for this project.
   * @return principalInvestigators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Names of the Principal Investigators who are the lead scientists or engineers for this project.")

  public List<Contact> getPrincipalInvestigators() {
    return principalInvestigators;
  }


  public void setPrincipalInvestigators(List<Contact> principalInvestigators) {
    
    
    
    this.principalInvestigators = principalInvestigators;
  }


  public Project coInvestigators(List<Contact> coInvestigators) {
    
    
    
    
    this.coInvestigators = coInvestigators;
    return this;
  }

  public Project addCoInvestigatorsItem(Contact coInvestigatorsItem) {
    if (this.coInvestigators == null) {
      this.coInvestigators = new ArrayList<>();
    }
    this.coInvestigators.add(coInvestigatorsItem);
    return this;
  }

   /**
   * Names of the additional investigators who are scientists or engineers for this project.
   * @return coInvestigators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Names of the additional investigators who are scientists or engineers for this project.")

  public List<Contact> getCoInvestigators() {
    return coInvestigators;
  }


  public void setCoInvestigators(List<Contact> coInvestigators) {
    
    
    
    this.coInvestigators = coInvestigators;
  }


  public Project website(String website) {
    
    
    
    
    this.website = website;
    return this;
  }

   /**
   * The URL for the associated website.
   * @return website
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL for the associated website.")

  public String getWebsite() {
    return website;
  }


  public void setWebsite(String website) {
    
    
    
    this.website = website;
  }


  public Project libraryItems(List<LibraryItem> libraryItems) {
    
    
    
    
    this.libraryItems = libraryItems;
    return this;
  }

  public Project addLibraryItemsItem(LibraryItem libraryItemsItem) {
    if (this.libraryItems == null) {
      this.libraryItems = new ArrayList<>();
    }
    this.libraryItems.add(libraryItemsItem);
    return this;
  }

   /**
   * List of library items in the project library.
   * @return libraryItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of library items in the project library.")

  public List<LibraryItem> getLibraryItems() {
    return libraryItems;
  }


  public void setLibraryItems(List<LibraryItem> libraryItems) {
    
    
    
    this.libraryItems = libraryItems;
  }


  public Project stiDaas(List<LibraryItem> stiDaas) {
    
    
    
    
    this.stiDaas = stiDaas;
    return this;
  }

  public Project addStiDaasItem(LibraryItem stiDaasItem) {
    if (this.stiDaas == null) {
      this.stiDaas = new ArrayList<>();
    }
    this.stiDaas.add(stiDaasItem);
    return this;
  }

   /**
   * List of STI DAAs in the project library.
   * @return stiDaas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of STI DAAs in the project library.")

  public List<LibraryItem> getStiDaas() {
    return stiDaas;
  }


  public void setStiDaas(List<LibraryItem> stiDaas) {
    
    
    
    this.stiDaas = stiDaas;
  }


  public Project closeoutSummary(String closeoutSummary) {
    
    
    
    
    this.closeoutSummary = closeoutSummary;
    return this;
  }

   /**
   * The project closeout summary excerpt.
   * @return closeoutSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The project closeout summary excerpt.")

  public String getCloseoutSummary() {
    return closeoutSummary;
  }


  public void setCloseoutSummary(String closeoutSummary) {
    
    
    
    this.closeoutSummary = closeoutSummary;
  }


  public Project closeoutDocuments(List<LibraryItem> closeoutDocuments) {
    
    
    
    
    this.closeoutDocuments = closeoutDocuments;
    return this;
  }

  public Project addCloseoutDocumentsItem(LibraryItem closeoutDocumentsItem) {
    if (this.closeoutDocuments == null) {
      this.closeoutDocuments = new ArrayList<>();
    }
    this.closeoutDocuments.add(closeoutDocumentsItem);
    return this;
  }

   /**
   * List of document files or links to the project final report closeout documentation.
   * @return closeoutDocuments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of document files or links to the project final report closeout documentation.")

  public List<LibraryItem> getCloseoutDocuments() {
    return closeoutDocuments;
  }


  public void setCloseoutDocuments(List<LibraryItem> closeoutDocuments) {
    
    
    
    this.closeoutDocuments = closeoutDocuments;
  }


  public Project primaryImage(LibraryItem primaryImage) {
    
    
    
    
    this.primaryImage = primaryImage;
    return this;
  }

   /**
   * Get primaryImage
   * @return primaryImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LibraryItem getPrimaryImage() {
    return primaryImage;
  }


  public void setPrimaryImage(LibraryItem primaryImage) {
    
    
    
    this.primaryImage = primaryImage;
  }


  public Project viewCount(Long viewCount) {
    
    
    
    
    this.viewCount = viewCount;
    return this;
  }

   /**
   * The number of views for the project.
   * @return viewCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of views for the project.")

  public Long getViewCount() {
    return viewCount;
  }


  public void setViewCount(Long viewCount) {
    
    
    
    this.viewCount = viewCount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Project instance itself
   */
  public Project putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.title, project.title) &&
        Objects.equals(this.description, project.description) &&
        Objects.equals(this.projectId, project.projectId) &&
        Objects.equals(this.lastUpdated, project.lastUpdated) &&
        Objects.equals(this.acronym, project.acronym) &&
        Objects.equals(this.statusDescription, project.statusDescription) &&
        Objects.equals(this.benefits, project.benefits) &&
        Objects.equals(this.startDateString, project.startDateString) &&
        Objects.equals(this.endDateString, project.endDateString) &&
        Objects.equals(this.startTrl, project.startTrl) &&
        Objects.equals(this.currentTrl, project.currentTrl) &&
        Objects.equals(this.endTrl, project.endTrl) &&
        Objects.equals(this.primaryTaxonomyNodes, project.primaryTaxonomyNodes) &&
        Objects.equals(this.additionalTaxonomyNodes, project.additionalTaxonomyNodes) &&
        Objects.equals(this.destinations, project.destinations) &&
        Objects.equals(this.program, project.program) &&
        Objects.equals(this.responsibleMd, project.responsibleMd) &&
        Objects.equals(this.leadOrganization, project.leadOrganization) &&
        Objects.equals(this.supportingOrganizations, project.supportingOrganizations) &&
        Objects.equals(this.coFundingPartners, project.coFundingPartners) &&
        Objects.equals(this.statesWithWork, project.statesWithWork) &&
        Objects.equals(this.programDirectors, project.programDirectors) &&
        Objects.equals(this.programManagers, project.programManagers) &&
        Objects.equals(this.projectManagers, project.projectManagers) &&
        Objects.equals(this.principalInvestigators, project.principalInvestigators) &&
        Objects.equals(this.coInvestigators, project.coInvestigators) &&
        Objects.equals(this.website, project.website) &&
        Objects.equals(this.libraryItems, project.libraryItems) &&
        Objects.equals(this.stiDaas, project.stiDaas) &&
        Objects.equals(this.closeoutSummary, project.closeoutSummary) &&
        Objects.equals(this.closeoutDocuments, project.closeoutDocuments) &&
        Objects.equals(this.primaryImage, project.primaryImage) &&
        Objects.equals(this.viewCount, project.viewCount)&&
        Objects.equals(this.additionalProperties, project.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, projectId, lastUpdated, acronym, statusDescription, benefits, startDateString, endDateString, startTrl, currentTrl, endTrl, primaryTaxonomyNodes, additionalTaxonomyNodes, destinations, program, responsibleMd, leadOrganization, supportingOrganizations, coFundingPartners, statesWithWork, programDirectors, programManagers, projectManagers, principalInvestigators, coInvestigators, website, libraryItems, stiDaas, closeoutSummary, closeoutDocuments, primaryImage, viewCount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    acronym: ").append(toIndentedString(acronym)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    benefits: ").append(toIndentedString(benefits)).append("\n");
    sb.append("    startDateString: ").append(toIndentedString(startDateString)).append("\n");
    sb.append("    endDateString: ").append(toIndentedString(endDateString)).append("\n");
    sb.append("    startTrl: ").append(toIndentedString(startTrl)).append("\n");
    sb.append("    currentTrl: ").append(toIndentedString(currentTrl)).append("\n");
    sb.append("    endTrl: ").append(toIndentedString(endTrl)).append("\n");
    sb.append("    primaryTaxonomyNodes: ").append(toIndentedString(primaryTaxonomyNodes)).append("\n");
    sb.append("    additionalTaxonomyNodes: ").append(toIndentedString(additionalTaxonomyNodes)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    responsibleMd: ").append(toIndentedString(responsibleMd)).append("\n");
    sb.append("    leadOrganization: ").append(toIndentedString(leadOrganization)).append("\n");
    sb.append("    supportingOrganizations: ").append(toIndentedString(supportingOrganizations)).append("\n");
    sb.append("    coFundingPartners: ").append(toIndentedString(coFundingPartners)).append("\n");
    sb.append("    statesWithWork: ").append(toIndentedString(statesWithWork)).append("\n");
    sb.append("    programDirectors: ").append(toIndentedString(programDirectors)).append("\n");
    sb.append("    programManagers: ").append(toIndentedString(programManagers)).append("\n");
    sb.append("    projectManagers: ").append(toIndentedString(projectManagers)).append("\n");
    sb.append("    principalInvestigators: ").append(toIndentedString(principalInvestigators)).append("\n");
    sb.append("    coInvestigators: ").append(toIndentedString(coInvestigators)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    libraryItems: ").append(toIndentedString(libraryItems)).append("\n");
    sb.append("    stiDaas: ").append(toIndentedString(stiDaas)).append("\n");
    sb.append("    closeoutSummary: ").append(toIndentedString(closeoutSummary)).append("\n");
    sb.append("    closeoutDocuments: ").append(toIndentedString(closeoutDocuments)).append("\n");
    sb.append("    primaryImage: ").append(toIndentedString(primaryImage)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("projectId");
    openapiFields.add("lastUpdated");
    openapiFields.add("acronym");
    openapiFields.add("statusDescription");
    openapiFields.add("benefits");
    openapiFields.add("startDateString");
    openapiFields.add("endDateString");
    openapiFields.add("startTrl");
    openapiFields.add("currentTrl");
    openapiFields.add("endTrl");
    openapiFields.add("primaryTaxonomyNodes");
    openapiFields.add("additionalTaxonomyNodes");
    openapiFields.add("destinations");
    openapiFields.add("program");
    openapiFields.add("responsibleMd");
    openapiFields.add("leadOrganization");
    openapiFields.add("supportingOrganizations");
    openapiFields.add("coFundingPartners");
    openapiFields.add("statesWithWork");
    openapiFields.add("programDirectors");
    openapiFields.add("programManagers");
    openapiFields.add("projectManagers");
    openapiFields.add("principalInvestigators");
    openapiFields.add("coInvestigators");
    openapiFields.add("website");
    openapiFields.add("libraryItems");
    openapiFields.add("stiDaas");
    openapiFields.add("closeoutSummary");
    openapiFields.add("closeoutDocuments");
    openapiFields.add("primaryImage");
    openapiFields.add("viewCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Project
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Project.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Project is not found in the empty JSON string", Project.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("acronym") != null && !jsonObj.get("acronym").isJsonNull()) && !jsonObj.get("acronym").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acronym` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acronym").toString()));
      }
      if ((jsonObj.get("statusDescription") != null && !jsonObj.get("statusDescription").isJsonNull()) && !jsonObj.get("statusDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDescription").toString()));
      }
      if ((jsonObj.get("benefits") != null && !jsonObj.get("benefits").isJsonNull()) && !jsonObj.get("benefits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benefits").toString()));
      }
      if ((jsonObj.get("startDateString") != null && !jsonObj.get("startDateString").isJsonNull()) && !jsonObj.get("startDateString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateString").toString()));
      }
      if ((jsonObj.get("endDateString") != null && !jsonObj.get("endDateString").isJsonNull()) && !jsonObj.get("endDateString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDateString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDateString").toString()));
      }
      if (jsonObj.get("primaryTaxonomyNodes") != null && !jsonObj.get("primaryTaxonomyNodes").isJsonNull()) {
        JsonArray jsonArrayprimaryTaxonomyNodes = jsonObj.getAsJsonArray("primaryTaxonomyNodes");
        if (jsonArrayprimaryTaxonomyNodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("primaryTaxonomyNodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `primaryTaxonomyNodes` to be an array in the JSON string but got `%s`", jsonObj.get("primaryTaxonomyNodes").toString()));
          }

          // validate the optional field `primaryTaxonomyNodes` (array)
          for (int i = 0; i < jsonArrayprimaryTaxonomyNodes.size(); i++) {
            TaxonomyNode.validateJsonObject(jsonArrayprimaryTaxonomyNodes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("additionalTaxonomyNodes") != null && !jsonObj.get("additionalTaxonomyNodes").isJsonNull()) {
        JsonArray jsonArrayadditionalTaxonomyNodes = jsonObj.getAsJsonArray("additionalTaxonomyNodes");
        if (jsonArrayadditionalTaxonomyNodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalTaxonomyNodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalTaxonomyNodes` to be an array in the JSON string but got `%s`", jsonObj.get("additionalTaxonomyNodes").toString()));
          }

          // validate the optional field `additionalTaxonomyNodes` (array)
          for (int i = 0; i < jsonArrayadditionalTaxonomyNodes.size(); i++) {
            TaxonomyNode.validateJsonObject(jsonArrayadditionalTaxonomyNodes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            LkuCode.validateJsonObject(jsonArraydestinations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("supportingOrganizations") != null && !jsonObj.get("supportingOrganizations").isJsonNull()) {
        JsonArray jsonArraysupportingOrganizations = jsonObj.getAsJsonArray("supportingOrganizations");
        if (jsonArraysupportingOrganizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportingOrganizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportingOrganizations` to be an array in the JSON string but got `%s`", jsonObj.get("supportingOrganizations").toString()));
          }

          // validate the optional field `supportingOrganizations` (array)
          for (int i = 0; i < jsonArraysupportingOrganizations.size(); i++) {
            Organization.validateJsonObject(jsonArraysupportingOrganizations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("coFundingPartners") != null && !jsonObj.get("coFundingPartners").isJsonNull()) {
        JsonArray jsonArraycoFundingPartners = jsonObj.getAsJsonArray("coFundingPartners");
        if (jsonArraycoFundingPartners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("coFundingPartners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `coFundingPartners` to be an array in the JSON string but got `%s`", jsonObj.get("coFundingPartners").toString()));
          }

          // validate the optional field `coFundingPartners` (array)
          for (int i = 0; i < jsonArraycoFundingPartners.size(); i++) {
            Organization.validateJsonObject(jsonArraycoFundingPartners.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("statesWithWork") != null && !jsonObj.get("statesWithWork").isJsonNull()) {
        JsonArray jsonArraystatesWithWork = jsonObj.getAsJsonArray("statesWithWork");
        if (jsonArraystatesWithWork != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statesWithWork").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statesWithWork` to be an array in the JSON string but got `%s`", jsonObj.get("statesWithWork").toString()));
          }

          // validate the optional field `statesWithWork` (array)
          for (int i = 0; i < jsonArraystatesWithWork.size(); i++) {
            Location.validateJsonObject(jsonArraystatesWithWork.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("programDirectors") != null && !jsonObj.get("programDirectors").isJsonNull()) {
        JsonArray jsonArrayprogramDirectors = jsonObj.getAsJsonArray("programDirectors");
        if (jsonArrayprogramDirectors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("programDirectors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `programDirectors` to be an array in the JSON string but got `%s`", jsonObj.get("programDirectors").toString()));
          }

          // validate the optional field `programDirectors` (array)
          for (int i = 0; i < jsonArrayprogramDirectors.size(); i++) {
            Contact.validateJsonObject(jsonArrayprogramDirectors.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("programManagers") != null && !jsonObj.get("programManagers").isJsonNull()) {
        JsonArray jsonArrayprogramManagers = jsonObj.getAsJsonArray("programManagers");
        if (jsonArrayprogramManagers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("programManagers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `programManagers` to be an array in the JSON string but got `%s`", jsonObj.get("programManagers").toString()));
          }

          // validate the optional field `programManagers` (array)
          for (int i = 0; i < jsonArrayprogramManagers.size(); i++) {
            Contact.validateJsonObject(jsonArrayprogramManagers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("projectManagers") != null && !jsonObj.get("projectManagers").isJsonNull()) {
        JsonArray jsonArrayprojectManagers = jsonObj.getAsJsonArray("projectManagers");
        if (jsonArrayprojectManagers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("projectManagers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `projectManagers` to be an array in the JSON string but got `%s`", jsonObj.get("projectManagers").toString()));
          }

          // validate the optional field `projectManagers` (array)
          for (int i = 0; i < jsonArrayprojectManagers.size(); i++) {
            Contact.validateJsonObject(jsonArrayprojectManagers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("principalInvestigators") != null && !jsonObj.get("principalInvestigators").isJsonNull()) {
        JsonArray jsonArrayprincipalInvestigators = jsonObj.getAsJsonArray("principalInvestigators");
        if (jsonArrayprincipalInvestigators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("principalInvestigators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `principalInvestigators` to be an array in the JSON string but got `%s`", jsonObj.get("principalInvestigators").toString()));
          }

          // validate the optional field `principalInvestigators` (array)
          for (int i = 0; i < jsonArrayprincipalInvestigators.size(); i++) {
            Contact.validateJsonObject(jsonArrayprincipalInvestigators.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("coInvestigators") != null && !jsonObj.get("coInvestigators").isJsonNull()) {
        JsonArray jsonArraycoInvestigators = jsonObj.getAsJsonArray("coInvestigators");
        if (jsonArraycoInvestigators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("coInvestigators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `coInvestigators` to be an array in the JSON string but got `%s`", jsonObj.get("coInvestigators").toString()));
          }

          // validate the optional field `coInvestigators` (array)
          for (int i = 0; i < jsonArraycoInvestigators.size(); i++) {
            Contact.validateJsonObject(jsonArraycoInvestigators.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      if (jsonObj.get("libraryItems") != null && !jsonObj.get("libraryItems").isJsonNull()) {
        JsonArray jsonArraylibraryItems = jsonObj.getAsJsonArray("libraryItems");
        if (jsonArraylibraryItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("libraryItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `libraryItems` to be an array in the JSON string but got `%s`", jsonObj.get("libraryItems").toString()));
          }

          // validate the optional field `libraryItems` (array)
          for (int i = 0; i < jsonArraylibraryItems.size(); i++) {
            LibraryItem.validateJsonObject(jsonArraylibraryItems.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("stiDaas") != null && !jsonObj.get("stiDaas").isJsonNull()) {
        JsonArray jsonArraystiDaas = jsonObj.getAsJsonArray("stiDaas");
        if (jsonArraystiDaas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stiDaas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stiDaas` to be an array in the JSON string but got `%s`", jsonObj.get("stiDaas").toString()));
          }

          // validate the optional field `stiDaas` (array)
          for (int i = 0; i < jsonArraystiDaas.size(); i++) {
            LibraryItem.validateJsonObject(jsonArraystiDaas.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("closeoutSummary") != null && !jsonObj.get("closeoutSummary").isJsonNull()) && !jsonObj.get("closeoutSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closeoutSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closeoutSummary").toString()));
      }
      if (jsonObj.get("closeoutDocuments") != null && !jsonObj.get("closeoutDocuments").isJsonNull()) {
        JsonArray jsonArraycloseoutDocuments = jsonObj.getAsJsonArray("closeoutDocuments");
        if (jsonArraycloseoutDocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("closeoutDocuments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `closeoutDocuments` to be an array in the JSON string but got `%s`", jsonObj.get("closeoutDocuments").toString()));
          }

          // validate the optional field `closeoutDocuments` (array)
          for (int i = 0; i < jsonArraycloseoutDocuments.size(); i++) {
            LibraryItem.validateJsonObject(jsonArraycloseoutDocuments.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Project.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Project' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Project> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Project.class));

       return (TypeAdapter<T>) new TypeAdapter<Project>() {
           @Override
           public void write(JsonWriter out, Project value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Project read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Project instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Project given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Project
  * @throws IOException if the JSON string is invalid with respect to Project
  */
  public static Project fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Project.class);
  }

 /**
  * Convert an instance of Project to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

