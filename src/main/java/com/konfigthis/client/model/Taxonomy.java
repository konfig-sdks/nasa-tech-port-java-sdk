/*
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.13.2
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TreeNode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Represents data associated with a single taxonomy root entity.
 */
@ApiModel(description = "Represents data associated with a single taxonomy root entity.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Taxonomy {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TAXONOMY_ROOT_ID = "taxonomyRootId";
  @SerializedName(SERIALIZED_NAME_TAXONOMY_ROOT_ID)
  private Long taxonomyRootId;

  public static final String SERIALIZED_NAME_RELEASE_STATUS_ID = "releaseStatusId";
  @SerializedName(SERIALIZED_NAME_RELEASE_STATUS_ID)
  private Long releaseStatusId;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private String definition;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private String modifiedBy;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private LocalDate modifiedDate;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<TreeNode> children = null;

  public static final String SERIALIZED_NAME_RELEASE_STATUS = "releaseStatus";
  @SerializedName(SERIALIZED_NAME_RELEASE_STATUS)
  private String releaseStatus;

  public Taxonomy() {
  }

  public Taxonomy title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title for this taxonomy
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title for this taxonomy")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Taxonomy taxonomyRootId(Long taxonomyRootId) {
    
    
    
    
    this.taxonomyRootId = taxonomyRootId;
    return this;
  }

   /**
   * Unique ID for this taxonomy
   * @return taxonomyRootId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for this taxonomy")

  public Long getTaxonomyRootId() {
    return taxonomyRootId;
  }


  public void setTaxonomyRootId(Long taxonomyRootId) {
    
    
    
    this.taxonomyRootId = taxonomyRootId;
  }


  public Taxonomy releaseStatusId(Long releaseStatusId) {
    
    
    
    
    this.releaseStatusId = releaseStatusId;
    return this;
  }

   /**
   * ID for this taxonomy roots release status
   * @return releaseStatusId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID for this taxonomy roots release status")

  public Long getReleaseStatusId() {
    return releaseStatusId;
  }


  public void setReleaseStatusId(Long releaseStatusId) {
    
    
    
    this.releaseStatusId = releaseStatusId;
  }


  public Taxonomy definition(String definition) {
    
    
    
    
    this.definition = definition;
    return this;
  }

   /**
   * Definition for this taxonomy
   * @return definition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Definition for this taxonomy")

  public String getDefinition() {
    return definition;
  }


  public void setDefinition(String definition) {
    
    
    
    this.definition = definition;
  }


  public Taxonomy modifiedBy(String modifiedBy) {
    
    
    
    
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * The last user to modify this taxonomy
   * @return modifiedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The last user to modify this taxonomy")

  public String getModifiedBy() {
    return modifiedBy;
  }


  public void setModifiedBy(String modifiedBy) {
    
    
    
    this.modifiedBy = modifiedBy;
  }


  public Taxonomy modifiedDate(LocalDate modifiedDate) {
    
    
    
    
    this.modifiedDate = modifiedDate;
    return this;
  }

   /**
   * The date this taxonomy was last modified
   * @return modifiedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date this taxonomy was last modified")

  public LocalDate getModifiedDate() {
    return modifiedDate;
  }


  public void setModifiedDate(LocalDate modifiedDate) {
    
    
    
    this.modifiedDate = modifiedDate;
  }


  public Taxonomy children(List<TreeNode> children) {
    
    
    
    
    this.children = children;
    return this;
  }

  public Taxonomy addChildrenItem(TreeNode childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TreeNode> getChildren() {
    return children;
  }


  public void setChildren(List<TreeNode> children) {
    
    
    
    this.children = children;
  }


  public Taxonomy releaseStatus(String releaseStatus) {
    
    
    
    
    this.releaseStatus = releaseStatus;
    return this;
  }

   /**
   * The release status of this taxonomy
   * @return releaseStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The release status of this taxonomy")

  public String getReleaseStatus() {
    return releaseStatus;
  }


  public void setReleaseStatus(String releaseStatus) {
    
    
    
    this.releaseStatus = releaseStatus;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Taxonomy instance itself
   */
  public Taxonomy putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Taxonomy taxonomy = (Taxonomy) o;
    return Objects.equals(this.title, taxonomy.title) &&
        Objects.equals(this.taxonomyRootId, taxonomy.taxonomyRootId) &&
        Objects.equals(this.releaseStatusId, taxonomy.releaseStatusId) &&
        Objects.equals(this.definition, taxonomy.definition) &&
        Objects.equals(this.modifiedBy, taxonomy.modifiedBy) &&
        Objects.equals(this.modifiedDate, taxonomy.modifiedDate) &&
        Objects.equals(this.children, taxonomy.children) &&
        Objects.equals(this.releaseStatus, taxonomy.releaseStatus)&&
        Objects.equals(this.additionalProperties, taxonomy.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, taxonomyRootId, releaseStatusId, definition, modifiedBy, modifiedDate, children, releaseStatus, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Taxonomy {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    taxonomyRootId: ").append(toIndentedString(taxonomyRootId)).append("\n");
    sb.append("    releaseStatusId: ").append(toIndentedString(releaseStatusId)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    releaseStatus: ").append(toIndentedString(releaseStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("taxonomyRootId");
    openapiFields.add("releaseStatusId");
    openapiFields.add("definition");
    openapiFields.add("modifiedBy");
    openapiFields.add("modifiedDate");
    openapiFields.add("children");
    openapiFields.add("releaseStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Taxonomy
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Taxonomy.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Taxonomy is not found in the empty JSON string", Taxonomy.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) && !jsonObj.get("definition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definition").toString()));
      }
      if ((jsonObj.get("modifiedBy") != null && !jsonObj.get("modifiedBy").isJsonNull()) && !jsonObj.get("modifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedBy").toString()));
      }
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
          }

          // validate the optional field `children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            TreeNode.validateJsonObject(jsonArraychildren.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("releaseStatus") != null && !jsonObj.get("releaseStatus").isJsonNull()) && !jsonObj.get("releaseStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Taxonomy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Taxonomy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Taxonomy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Taxonomy.class));

       return (TypeAdapter<T>) new TypeAdapter<Taxonomy>() {
           @Override
           public void write(JsonWriter out, Taxonomy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Taxonomy read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Taxonomy instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Taxonomy given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Taxonomy
  * @throws IOException if the JSON string is invalid with respect to Taxonomy
  */
  public static Taxonomy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Taxonomy.class);
  }

 /**
  * Convert an instance of Taxonomy to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

