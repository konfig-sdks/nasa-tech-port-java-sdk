/*
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.13.2
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Organization;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Represents a NASA program.
 */
@ApiModel(description = "Represents a NASA program.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Program {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PROGRAM_ID = "programId";
  @SerializedName(SERIALIZED_NAME_PROGRAM_ID)
  private Long programId;

  public static final String SERIALIZED_NAME_ACRONYM = "acronym";
  @SerializedName(SERIALIZED_NAME_ACRONYM)
  private String acronym;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_PARENT_PROGRAM = "parentProgram";
  @SerializedName(SERIALIZED_NAME_PARENT_PROGRAM)
  private Program parentProgram;

  public static final String SERIALIZED_NAME_PARENT_PROGRAM_ID = "parentProgramId";
  @SerializedName(SERIALIZED_NAME_PARENT_PROGRAM_ID)
  private Long parentProgramId;

  public static final String SERIALIZED_NAME_RESPONSIBLE_MD = "responsibleMd";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_MD)
  private Organization responsibleMd;

  public static final String SERIALIZED_NAME_RESPONSIBLE_MD_ID = "responsibleMdId";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_MD_ID)
  private Long responsibleMdId;

  public Program() {
  }

  public Program title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title for the program
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title for the program")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Program description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description for the program
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description for the program")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Program programId(Long programId) {
    
    
    
    
    this.programId = programId;
    return this;
  }

   /**
   * Unique ID for this program
   * @return programId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for this program")

  public Long getProgramId() {
    return programId;
  }


  public void setProgramId(Long programId) {
    
    
    
    this.programId = programId;
  }


  public Program acronym(String acronym) {
    
    
    
    
    this.acronym = acronym;
    return this;
  }

   /**
   * Acronym for this program
   * @return acronym
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Acronym for this program")

  public String getAcronym() {
    return acronym;
  }


  public void setAcronym(String acronym) {
    
    
    
    this.acronym = acronym;
  }


  public Program active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * True if the program is still active
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the program is still active")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public Program parentProgram(Program parentProgram) {
    
    
    
    
    this.parentProgram = parentProgram;
    return this;
  }

   /**
   * Get parentProgram
   * @return parentProgram
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Program getParentProgram() {
    return parentProgram;
  }


  public void setParentProgram(Program parentProgram) {
    
    
    
    this.parentProgram = parentProgram;
  }


  public Program parentProgramId(Long parentProgramId) {
    
    
    
    
    this.parentProgramId = parentProgramId;
    return this;
  }

   /**
   * Unique ID for the parent program
   * @return parentProgramId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for the parent program")

  public Long getParentProgramId() {
    return parentProgramId;
  }


  public void setParentProgramId(Long parentProgramId) {
    
    
    
    this.parentProgramId = parentProgramId;
  }


  public Program responsibleMd(Organization responsibleMd) {
    
    
    
    
    this.responsibleMd = responsibleMd;
    return this;
  }

   /**
   * Get responsibleMd
   * @return responsibleMd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Organization getResponsibleMd() {
    return responsibleMd;
  }


  public void setResponsibleMd(Organization responsibleMd) {
    
    
    
    this.responsibleMd = responsibleMd;
  }


  public Program responsibleMdId(Long responsibleMdId) {
    
    
    
    
    this.responsibleMdId = responsibleMdId;
    return this;
  }

   /**
   * Unique ID for the parent responsible mission directorate
   * @return responsibleMdId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for the parent responsible mission directorate")

  public Long getResponsibleMdId() {
    return responsibleMdId;
  }


  public void setResponsibleMdId(Long responsibleMdId) {
    
    
    
    this.responsibleMdId = responsibleMdId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Program instance itself
   */
  public Program putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Program program = (Program) o;
    return Objects.equals(this.title, program.title) &&
        Objects.equals(this.description, program.description) &&
        Objects.equals(this.programId, program.programId) &&
        Objects.equals(this.acronym, program.acronym) &&
        Objects.equals(this.active, program.active) &&
        Objects.equals(this.parentProgram, program.parentProgram) &&
        Objects.equals(this.parentProgramId, program.parentProgramId) &&
        Objects.equals(this.responsibleMd, program.responsibleMd) &&
        Objects.equals(this.responsibleMdId, program.responsibleMdId)&&
        Objects.equals(this.additionalProperties, program.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, programId, acronym, active, parentProgram, parentProgramId, responsibleMd, responsibleMdId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Program {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    programId: ").append(toIndentedString(programId)).append("\n");
    sb.append("    acronym: ").append(toIndentedString(acronym)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    parentProgram: ").append(toIndentedString(parentProgram)).append("\n");
    sb.append("    parentProgramId: ").append(toIndentedString(parentProgramId)).append("\n");
    sb.append("    responsibleMd: ").append(toIndentedString(responsibleMd)).append("\n");
    sb.append("    responsibleMdId: ").append(toIndentedString(responsibleMdId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("programId");
    openapiFields.add("acronym");
    openapiFields.add("active");
    openapiFields.add("parentProgram");
    openapiFields.add("parentProgramId");
    openapiFields.add("responsibleMd");
    openapiFields.add("responsibleMdId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Program
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Program.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Program is not found in the empty JSON string", Program.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("acronym") != null && !jsonObj.get("acronym").isJsonNull()) && !jsonObj.get("acronym").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acronym` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acronym").toString()));
      }
      // validate the optional field `parentProgram`
      if (jsonObj.get("parentProgram") != null && !jsonObj.get("parentProgram").isJsonNull()) {
        Program.validateJsonObject(jsonObj.getAsJsonObject("parentProgram"));
      }
      // validate the optional field `responsibleMd`
      if (jsonObj.get("responsibleMd") != null && !jsonObj.get("responsibleMd").isJsonNull()) {
        Organization.validateJsonObject(jsonObj.getAsJsonObject("responsibleMd"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Program.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Program' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Program> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Program.class));

       return (TypeAdapter<T>) new TypeAdapter<Program>() {
           @Override
           public void write(JsonWriter out, Program value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Program read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Program instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Program given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Program
  * @throws IOException if the JSON string is invalid with respect to Program
  */
  public static Program fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Program.class);
  }

 /**
  * Convert an instance of Program to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

