/*
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.13.2
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Represents data associated with a single taxonomy node entity.
 */
@ApiModel(description = "Represents data associated with a single taxonomy node entity.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TaxonomyNode {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TAXONOMY_NODE_ID = "taxonomyNodeId";
  @SerializedName(SERIALIZED_NAME_TAXONOMY_NODE_ID)
  private Long taxonomyNodeId;

  public static final String SERIALIZED_NAME_TAXONOMY_ROOT_ID = "taxonomyRootId";
  @SerializedName(SERIALIZED_NAME_TAXONOMY_ROOT_ID)
  private Long taxonomyRootId;

  public static final String SERIALIZED_NAME_PARENT_NODE_ID = "parentNodeId";
  @SerializedName(SERIALIZED_NAME_PARENT_NODE_ID)
  private Long parentNodeId;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Long level;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private String definition;

  public static final String SERIALIZED_NAME_HAS_CHILDREN = "hasChildren";
  @SerializedName(SERIALIZED_NAME_HAS_CHILDREN)
  private Boolean hasChildren;

  public static final String SERIALIZED_NAME_PUBLISHED_URL = "publishedUrl";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_URL)
  private String publishedUrl;

  public TaxonomyNode() {
  }

  public TaxonomyNode title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title of the taxonomy node
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title of the taxonomy node")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public TaxonomyNode taxonomyNodeId(Long taxonomyNodeId) {
    
    
    
    
    this.taxonomyNodeId = taxonomyNodeId;
    return this;
  }

   /**
   * Unique identifier for the taxonomy node
   * @return taxonomyNodeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the taxonomy node")

  public Long getTaxonomyNodeId() {
    return taxonomyNodeId;
  }


  public void setTaxonomyNodeId(Long taxonomyNodeId) {
    
    
    
    this.taxonomyNodeId = taxonomyNodeId;
  }


  public TaxonomyNode taxonomyRootId(Long taxonomyRootId) {
    
    
    
    
    this.taxonomyRootId = taxonomyRootId;
    return this;
  }

   /**
   * Unique identifier for the root of this taxonomy node
   * @return taxonomyRootId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the root of this taxonomy node")

  public Long getTaxonomyRootId() {
    return taxonomyRootId;
  }


  public void setTaxonomyRootId(Long taxonomyRootId) {
    
    
    
    this.taxonomyRootId = taxonomyRootId;
  }


  public TaxonomyNode parentNodeId(Long parentNodeId) {
    
    
    
    
    this.parentNodeId = parentNodeId;
    return this;
  }

   /**
   * Unique identifier for the taxonomy node/root that is the direct parent of this taxonomy node
   * @return parentNodeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the taxonomy node/root that is the direct parent of this taxonomy node")

  public Long getParentNodeId() {
    return parentNodeId;
  }


  public void setParentNodeId(Long parentNodeId) {
    
    
    
    this.parentNodeId = parentNodeId;
  }


  public TaxonomyNode level(Long level) {
    
    
    
    
    this.level = level;
    return this;
  }

   /**
   * The level of this node on the tree (0 being the root)
   * @return level
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The level of this node on the tree (0 being the root)")

  public Long getLevel() {
    return level;
  }


  public void setLevel(Long level) {
    
    
    
    this.level = level;
  }


  public TaxonomyNode code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Code of the taxonomy node
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Code of the taxonomy node")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public TaxonomyNode definition(String definition) {
    
    
    
    
    this.definition = definition;
    return this;
  }

   /**
   * Definition of the taxonomy node
   * @return definition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Definition of the taxonomy node")

  public String getDefinition() {
    return definition;
  }


  public void setDefinition(String definition) {
    
    
    
    this.definition = definition;
  }


  public TaxonomyNode hasChildren(Boolean hasChildren) {
    
    
    
    
    this.hasChildren = hasChildren;
    return this;
  }

   /**
   * Defines whether this node has children
   * @return hasChildren
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines whether this node has children")

  public Boolean getHasChildren() {
    return hasChildren;
  }


  public void setHasChildren(Boolean hasChildren) {
    
    
    
    this.hasChildren = hasChildren;
  }


  public TaxonomyNode publishedUrl(String publishedUrl) {
    
    
    
    
    this.publishedUrl = publishedUrl;
    return this;
  }

   /**
   * Published URL of the taxonomy node
   * @return publishedUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Published URL of the taxonomy node")

  public String getPublishedUrl() {
    return publishedUrl;
  }


  public void setPublishedUrl(String publishedUrl) {
    
    
    
    this.publishedUrl = publishedUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TaxonomyNode instance itself
   */
  public TaxonomyNode putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxonomyNode taxonomyNode = (TaxonomyNode) o;
    return Objects.equals(this.title, taxonomyNode.title) &&
        Objects.equals(this.taxonomyNodeId, taxonomyNode.taxonomyNodeId) &&
        Objects.equals(this.taxonomyRootId, taxonomyNode.taxonomyRootId) &&
        Objects.equals(this.parentNodeId, taxonomyNode.parentNodeId) &&
        Objects.equals(this.level, taxonomyNode.level) &&
        Objects.equals(this.code, taxonomyNode.code) &&
        Objects.equals(this.definition, taxonomyNode.definition) &&
        Objects.equals(this.hasChildren, taxonomyNode.hasChildren) &&
        Objects.equals(this.publishedUrl, taxonomyNode.publishedUrl)&&
        Objects.equals(this.additionalProperties, taxonomyNode.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, taxonomyNodeId, taxonomyRootId, parentNodeId, level, code, definition, hasChildren, publishedUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxonomyNode {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    taxonomyNodeId: ").append(toIndentedString(taxonomyNodeId)).append("\n");
    sb.append("    taxonomyRootId: ").append(toIndentedString(taxonomyRootId)).append("\n");
    sb.append("    parentNodeId: ").append(toIndentedString(parentNodeId)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    publishedUrl: ").append(toIndentedString(publishedUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("taxonomyNodeId");
    openapiFields.add("taxonomyRootId");
    openapiFields.add("parentNodeId");
    openapiFields.add("level");
    openapiFields.add("code");
    openapiFields.add("definition");
    openapiFields.add("hasChildren");
    openapiFields.add("publishedUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxonomyNode
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TaxonomyNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxonomyNode is not found in the empty JSON string", TaxonomyNode.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) && !jsonObj.get("definition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definition").toString()));
      }
      if ((jsonObj.get("publishedUrl") != null && !jsonObj.get("publishedUrl").isJsonNull()) && !jsonObj.get("publishedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishedUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxonomyNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxonomyNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxonomyNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxonomyNode.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxonomyNode>() {
           @Override
           public void write(JsonWriter out, TaxonomyNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxonomyNode read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TaxonomyNode instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxonomyNode given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxonomyNode
  * @throws IOException if the JSON string is invalid with respect to TaxonomyNode
  */
  public static TaxonomyNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxonomyNode.class);
  }

 /**
  * Convert an instance of TaxonomyNode to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

