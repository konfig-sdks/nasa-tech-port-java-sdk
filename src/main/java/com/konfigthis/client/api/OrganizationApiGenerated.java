/*
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.13.2
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OrganizationGetInformationResponse;
import com.konfigthis.client.model.OrganizationGetListByNameResponse;
import com.konfigthis.client.model.OrganizationListTypesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrganizationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getInformationCall(Long organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organizations/{organizationId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformationValidateBeforeCall(Long organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getInformation(Async)");
        }

        return getInformationCall(organizationId, _callback);

    }


    private ApiResponse<OrganizationGetInformationResponse> getInformationWithHttpInfo(Long organizationId) throws ApiException {
        okhttp3.Call localVarCall = getInformationValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<OrganizationGetInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInformationAsync(Long organizationId, final ApiCallback<OrganizationGetInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformationValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationGetInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInformationRequestBuilder {
        private final Long organizationId;

        private GetInformationRequestBuilder(Long organizationId) {
            this.organizationId = organizationId;
        }

        /**
         * Build call for getInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. Organization detailed data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInformationCall(organizationId, _callback);
        }


        /**
         * Execute getInformation request
         * @return OrganizationGetInformationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. Organization detailed data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationGetInformationResponse execute() throws ApiException {
            ApiResponse<OrganizationGetInformationResponse> localVarResp = getInformationWithHttpInfo(organizationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInformation request with HTTP info returned
         * @return ApiResponse&lt;OrganizationGetInformationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. Organization detailed data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationGetInformationResponse> executeWithHttpInfo() throws ApiException {
            return getInformationWithHttpInfo(organizationId);
        }

        /**
         * Execute getInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. Organization detailed data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationGetInformationResponse> _callback) throws ApiException {
            return getInformationAsync(organizationId, _callback);
        }
    }

    /**
     * 
     * Get an organization and its information.
     * @param organizationId Organization Id. (required)
     * @return GetInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Organization detailed data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public GetInformationRequestBuilder getInformation(Long organizationId) throws IllegalArgumentException {
        if (organizationId == null) throw new IllegalArgumentException("\"organizationId\" is required but got null");
        return new GetInformationRequestBuilder(organizationId);
    }
    private okhttp3.Call getListByNameCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListByNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        return getListByNameCall(name, _callback);

    }


    private ApiResponse<OrganizationGetListByNameResponse> getListByNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getListByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<OrganizationGetListByNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListByNameAsync(String name, final ApiCallback<OrganizationGetListByNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<OrganizationGetListByNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListByNameRequestBuilder {
        private String name;

        private GetListByNameRequestBuilder() {
        }

        /**
         * Set name
         * @param name Organization Name to filter on. (optional)
         * @return GetListByNameRequestBuilder
         */
        public GetListByNameRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for getListByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListByNameCall(name, _callback);
        }


        /**
         * Execute getListByName request
         * @return OrganizationGetListByNameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationGetListByNameResponse execute() throws ApiException {
            ApiResponse<OrganizationGetListByNameResponse> localVarResp = getListByNameWithHttpInfo(name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getListByName request with HTTP info returned
         * @return ApiResponse&lt;OrganizationGetListByNameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationGetListByNameResponse> executeWithHttpInfo() throws ApiException {
            return getListByNameWithHttpInfo(name);
        }

        /**
         * Execute getListByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationGetListByNameResponse> _callback) throws ApiException {
            return getListByNameAsync(name, _callback);
        }
    }

    /**
     * 
     * Returns a list of organizations that match a given name.
     * @return GetListByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetListByNameRequestBuilder getListByName() throws IllegalArgumentException {
        return new GetListByNameRequestBuilder();
    }
    private okhttp3.Call listTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organizations/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listTypesCall(_callback);

    }


    private ApiResponse<OrganizationListTypesResponse> listTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrganizationListTypesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTypesAsync(final ApiCallback<OrganizationListTypesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrganizationListTypesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTypesRequestBuilder {

        private ListTypesRequestBuilder() {
        }

        /**
         * Build call for listTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTypesCall(_callback);
        }


        /**
         * Execute listTypes request
         * @return OrganizationListTypesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationListTypesResponse execute() throws ApiException {
            ApiResponse<OrganizationListTypesResponse> localVarResp = listTypesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTypes request with HTTP info returned
         * @return ApiResponse&lt;OrganizationListTypesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationListTypesResponse> executeWithHttpInfo() throws ApiException {
            return listTypesWithHttpInfo();
        }

        /**
         * Execute listTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationListTypesResponse> _callback) throws ApiException {
            return listTypesAsync(_callback);
        }
    }

    /**
     * 
     * Returns a list of available organization types, including set-aside and MSI types.
     * @return ListTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public ListTypesRequestBuilder listTypes() throws IllegalArgumentException {
        return new ListTypesRequestBuilder();
    }
}
